#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef MARKETINGCLOUDSDK_SWIFT_H
#define MARKETINGCLOUDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import SFMCSDK;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MarketingCloudSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// :nodoc:
SWIFT_CLASS("_TtC17MarketingCloudSDK30MarketingCloudSDKSelectorUtils")
@interface MarketingCloudSDKSelectorUtils : NSObject
+ (BOOL)isAppDelegateImplementsSelector:(NSString * _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isUserNotificationDelegateImplementsSelector:(NSString * _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This class  is used to set the configuration neded for Push
SWIFT_CLASS("_TtC17MarketingCloudSDK10PushConfig")
@interface PushConfig : NSObject <SFMCSdkModuleConfig>
/// Enable or disable screen tracking
@property (nonatomic) BOOL trackScreens;
/// name of the module
@property (nonatomic, readonly) enum SFMCSdkModuleName name;
/// applicationId to initialize the SDK
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

/// PushConfigBuilder class
SWIFT_CLASS("_TtC17MarketingCloudSDK17PushConfigBuilder")
@interface PushConfigBuilder : NSObject
/// Initialize PushConfigBuilder
/// <ul>
///   <li>
///     :     appId  String which is a unique identifier
///   </li>
/// </ul>
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId OBJC_DESIGNATED_INITIALIZER;
/// <ul>
///   <li>
///     : accessToken setAccessToken Allows setting the value to use for the Salesforce MarketingCloud accessToken.
///   </li>
///   <li>
///     \code
///     Returns the PushConfigBuilder instancetype value
///
///     \endcode</li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setAccessToken:(NSString * _Nonnull)accessToken;
/// <ul>
///   <li>
///     : setMarketingCloudServerUrl Allows setting the value to use for the Salesforce Tenant Specific Url.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setMarketingCloudServerUrl:(NSURL * _Nonnull)endpoint;
/// <ul>
///   <li>
///     : setMid Allows setting the value to use for the Salesforce MarketingCloud Tenant Specific mid.
///   </li>
///   <li>
///     Returns returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setMid:(NSString * _Nonnull)mid;
/// <ul>
///   <li>
///     : setLocationEnabled Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setLocationEnabled:(BOOL)enabled;
/// <ul>
///   <li>
///     : setInboxEnabled Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setInboxEnabled:(BOOL)enabled;
/// <ul>
///   <li>
///     : setAnalyticsEnabled Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setAnalyticsEnabled:(BOOL)enabled;
/// <ul>
///   <li>
///     : setPiAnalyticsEnabled Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setPIAnalyticsEnabled:(BOOL)enabled;
/// <ul>
///   <li>
///     : etUseLegacyPIIdentifier Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setUseLegacyPIIdentifier:(BOOL)enabled;
/// <ul>
///   <li>
///     : setApplicationControlsBadging Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setApplicationControlsBadging:(BOOL)enabled;
/// Sets the configuration value which enables or disables application control over delaying SDK registration until a contact key is set
/// <ul>
///   <li>
///     : delayRegistrationUntilContactKeyIsSet Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setDelayRegistrationUntilContactKeyIsSet:(BOOL)enabled;
/// Sets the configuration value which enables or disables the screen entry tracking
/// <ul>
///   <li>
///     :enableScreenEntryTracking enables or disables screen entry tracking in SFMCSdk
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setEnableScreenEntryTracking:(BOOL)enabled;
/// Activates/Deactivates the automatic marking of inbox messages as read when clicking the inbox notification, provided that this configuration is enabled. The default setting for this API is true.
/// <ul>
///   <li>
///     :markMessageReadOnInboxNotificationOpen enables or disables this marking of inbox messages as read upon clicking the inbox notification.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setMarkMessageReadOnInboxNotificationOpen:(BOOL)enabled;
/// <ul>
///   <li>
///     Returns PushConfig containing the current builder configuration settings.
///   </li>
/// </ul>
- (PushConfig * _Nonnull)build;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SFMCSdkModuleLogger;
@class NSData;
@class UNNotificationRequest;
@protocol SFMCSdkModuleIdentity;
@protocol SFMCSdkInAppMessageEventDelegate;
@class UITableView;
@protocol SFMCSdkInboxMessagesDataSource;
@protocol SFMCSdkInboxMessagesDelegate;
@class NSNumber;
@protocol SFMCSdkLocationDelegate;
@class CLRegion;
@protocol SFMCSdkURLHandlingDelegate;
@class SFMCSdkComponents;
@class SFMCSdkMessage;
@class SFMCEvent;

/// This class is a Swift Interface  for SFMCSdkPushModule
SWIFT_CLASS_NAMED("PushModule")
@interface SFMCSdkPushModule : NSObject <PushInterface, SFMCModule, Subscriber>
/// Enum to get the Module Name
@property (nonatomic) enum SFMCSdkModuleName name;
/// String to get the Module Version
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull moduleVersion;)
+ (NSString * _Nonnull)moduleVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setModuleVersion:(NSString * _Nonnull)value;
/// Dictionary to get the SDK properties
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable stateProperties;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)stateProperties SWIFT_WARN_UNUSED_RESULT;
+ (void)setStateProperties:(NSDictionary<NSString *, NSString *> * _Nullable)newValue SWIFT_UNAVAILABLE;
/// Enum to get the status of Module with options => .inactive, .cancelled, .disabled, .failed, .initializing, .operational
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum SFMCSdkModuleStatus status;)
+ (enum SFMCSdkModuleStatus)status SWIFT_WARN_UNUSED_RESULT;
+ (void)setStatus:(enum SFMCSdkModuleStatus)value;
/// Singleton interface to access the PushModule
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SFMCSdkPushModule * _Nonnull shared;)
+ (SFMCSdkPushModule * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Unified Logger initialized for ‘Push’ Module
/// Usage: logger.d(category: .event, message: “Message”)
/// Category : Enum with following values => auth, behavior, encryption, eventBus, network, module, sdk, storage, consent, coredata, database, event, identity, interface, location, session, util
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SFMCSdkModuleLogger * _Nonnull logger;)
+ (SFMCSdkModuleLogger * _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
/// This method is to get the SDK metadata
+ (NSDictionary<NSString *, id> * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
/// Ask MarketingCloudSDK to update its data. MarketingCloudSDK will throttle attempts based on the time since the last time this was called.
/// <ul>
///   <li>
///     Returns   YES if MarketingCloudSDK did make an attempt at updating data.
///   </li>
/// </ul>
/// \param completionHandler The UIBackgroundFetchResult completion handler. This method will be called with UIBackgroundFetchResultNoData if no attempt was made to update data, otherwise it will be called with UIBackgroundFetchResultNewData after the update completes. If nil is passed, then process of the completion handler must be managed by the caller.
///
- (BOOL)refreshWithFetchCompletionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// This method properly closes down the MarketingCloudSDK. It should be used in any cases where references to the MarketingCloudSDK need to be released. Ensure to be called when sdk is operational
/// Eg: if(SFMCSdk.mp.getStatus() == .operational) { SFMCSdk.mp.tearDown()}
/// note:
/// This method will be removed in future versions
/// :nodoc:
- (void)tearDown SWIFT_DEPRECATED_MSG("This method will be removed as the Push Module will automatically handle tear downs upon initializations");
/// Returns if Data merge policy is reset to re-trigger merge
/// <ul>
///   <li>
///     Returns    Returns YES if data policy reset is successful
///   </li>
/// </ul>
- (BOOL)resetDataPolicy SWIFT_WARN_UNUSED_RESULT;
/// Enable/Disable extra debug logging from the SDK.
/// \param enabled BOOL for enabling or disabling extra SDK logging.
///
- (void)setDebugLoggingEnabled:(BOOL)enabled;
/// PushModule.shared.getLogger().d(category: .event, message: “Message”)
+ (SFMCSdkModuleLogger * _Nonnull)getLogger SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Contact key String that is set in the application.
- (NSString * _Nullable)contactKey SWIFT_WARN_UNUSED_RESULT;
/// Adds the provided Tag (NSString) to the set of unique tags.
/// \param tag A string to add to the list of tags.
///
///
/// returns:
/// YES if added successfully.
- (BOOL)addTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Adds the provided array of Tags (NSString) to the set of unique tags.
/// Will trim leading and trailing whitespace.
/// Cannot be nil or blank.
/// \param tags An array of tags to add to the list.
///
///
/// returns:
/// Set of tags added, as strings, or nil if something failed.
- (NSSet * _Nullable)addTags:(NSArray * _Nonnull)tags SWIFT_WARN_UNUSED_RESULT;
/// Removes the provided Tag (NSString) from the list of tags.
/// \param tag A string to remove from the list of tags.
///
///
/// returns:
/// YES if removed successfully.
- (BOOL)removeTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Returns the list of tags for this device.
///
/// returns:
/// All tags associated, as strings.
- (NSSet * _Nullable)tags SWIFT_WARN_UNUSED_RESULT;
/// Responsible for sending the Apple device token back to Salesforce. It marks the end of the token registration flow. If it is unable to reach Salesforce server, it will save the token and try again later.
/// This method is necessary to the implementation of Salesforce Push.
/// \param deviceToken An array of tags to add to the list.
///
- (void)setDeviceToken:(NSData * _Nonnull)deviceToken;
/// Returns the device token as a NSString.
/// <ul>
///   <li>
///     Returns   the device token as a NSString.
///   </li>
/// </ul>
- (NSString * _Nullable)deviceToken SWIFT_WARN_UNUSED_RESULT;
/// Returns a read-only copy of the Attributes dictionary as it is right now.
/// <ul>
///   <li>
///     Returns   All attributes currently set.
///   </li>
/// </ul>
- (NSDictionary * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
/// Returns the Salesforce application accessToken.
/// <ul>
///   <li>
///     Returns  NSString Salesforce application accessToken.
///   </li>
/// </ul>
- (NSString * _Nullable)accessToken SWIFT_WARN_UNUSED_RESULT;
/// Returns the unique device identifier that Salesforce will use to identify the device.
/// <ul>
///   <li>
///     Returns  NSString The device identifier (a UUID) as a NSString.
///   </li>
/// </ul>
- (NSString * _Nullable)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Add a signedString security token for registration security
/// <ul>
///   <li>
///     Returns   YES if signedString was set successfully
///   </li>
/// </ul>
/// \param signedString signedString opaque token used to verify registration. pass nil to clear signedString.
///
- (BOOL)setSignedString:(NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
/// Returns the value of last stored signedString security token
/// <ul>
///   <li>
///     Returns a String of last stored signedString security token
///   </li>
/// </ul>
- (NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
/// Register a callback that will be notified when Registration related events happen
/// @see: https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/sdk-implementation/user-data.html
/// @param registrationCallback   closure to be provided when registration event occurs
- (void)setRegistrationCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull))registrationCallback;
/// Removes the registration callback
/// @see: https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/sdk-implementation/user-data.html
- (void)unsetRegistrationCallback;
/// Developer override to set the state of push enablement to YES/NO. If set to NO, the application will not receive any push notifications once the Marketing Cloud server has been updated.
/// When this value is NO, it takes precedence (overrides) the user notifications settings (i.e., setting this to NO will always disable push.)
/// Conversely, if the user has notifications settings disabled, the developer cannot enable push via this method. A NO value from either source (user settings or developer interface) always wins.
/// \param pushEnabled Set to YES to enable push notifications.
///
- (void)setPushEnabled:(BOOL)pushEnabled;
/// The current state of the developer’s push enablement override
/// The current state of the pushEnabled flag in the SDK.
/// <ul>
///   <li>
///     Returns    BOOL value of the developer’s push enablement override.
///   </li>
///   <li>
///     Returns    a BOOL value of the current pushEnabled state.
///   </li>
/// </ul>
- (BOOL)pushEnabled SWIFT_WARN_UNUSED_RESULT;
/// Developer override to set the state of analytics enablement to YES/NO.
/// If set to NO, the SDK will stop tracking analytics and also purges all the analytics stored locally.
/// This value takes precedence over the config setting which is passed during the SDK initialization.
- (void)setAnalyticsEnabled:(BOOL)analyticsEnabled;
/// The current state of the Analytics enablement override
/// <ul>
///   <li>
///     Returns  a BOOL value of the Analytics enablement override considering config setting .
///   </li>
/// </ul>
- (BOOL)isAnalyticsEnabled SWIFT_WARN_UNUSED_RESULT;
/// Developer override to set the state of PI analytics enablement to YES/NO.
/// If set to NO, the SDK will stop tracking PI analytics and also purges all the analytics stored locally.
/// This value takes precedence over the config setting which is passed during the SDK initialization.
- (void)setPiAnalyticsEnabled:(BOOL)analyticsEnabled;
/// The current state of the PI Analytics enablement override
/// <ul>
///   <li>
///     Returns  a BOOL value of the PI Analytics enablement override considering config setting .
///   </li>
/// </ul>
- (BOOL)isPiAnalyticsEnabled SWIFT_WARN_UNUSED_RESULT;
/// The current state of the Location enablement override
/// <ul>
///   <li>
///     Returns a BOOL value of the Location enablement override considering config setting .
///   </li>
/// </ul>
- (BOOL)isLocationEnabled SWIFT_WARN_UNUSED_RESULT;
/// Developer override to set the state of Location enablement to YES/NO.
/// If set to NO, the SDK will stop monitoring location and Location services are not available for the consuming application.
/// This value takes precedence over the config setting which is passed during the SDK initialization.
/// \param locationEnabled Bool value to enabled/disable geofence at runtime
///
- (void)setLocationEnabled:(BOOL)locationEnabled;
/// The current state of the Inbox enablement override
/// <ul>
///   <li>
///     Returns a BOOL value of the Inbox enablement override considering config setting .
///   </li>
/// </ul>
- (BOOL)isInboxEnabled SWIFT_WARN_UNUSED_RESULT;
/// Developer override to set the state of Inbox enablement to YES/NO.
/// If set to NO, Inbox feature will be disabled.
/// This value takes precedence over the config setting which is passed during the SDK initialization.
/// \param inboxEnabled Bool value to enabled/disable Inbox at runtime
///
- (void)setInboxEnabled:(BOOL)inboxEnabled;
/// Informs the SDK of the current notification.
/// <ul>
///   <li>
///     Returns request:   The UNNotificationRequest that generated a notification.
///   </li>
/// </ul>
- (void)setNotificationRequest:(UNNotificationRequest * _Nonnull)request;
/// Returns the last notification delivered to the SDK.
/// <ul>
///   <li>
///     Returns UNNotificationRequest:    * The last UNNotificationRequest that generated a notification.
///   </li>
/// </ul>
- (UNNotificationRequest * _Nullable)notificationRequest SWIFT_WARN_UNUSED_RESULT;
/// Informs the SDK of the current notification.
/// \param userInfo The user info the last notification delivered to the SDK.
///
- (void)setNotificationUserInfo:(NSDictionary * _Nonnull)userInfo;
/// Returns the user info of the last notification delivered to the SDK.
/// <ul>
///   <li>
///     Returns Dictionary: * The user info the last notification delivered to the SDK.
///   </li>
/// </ul>
- (NSDictionary * _Nonnull)notificationUserInfo SWIFT_WARN_UNUSED_RESULT;
/// This method is used to get the SDK identity attributes such as applicationId, customProperties, installationId, profileId
- (id <SFMCSdkModuleIdentity> _Nullable)getIdentity SWIFT_WARN_UNUSED_RESULT;
/// In-app messages is used to deliver relevant, personalized messages to the app’s users with in-app messaging without relying on users having enabled push notifications. Set inapp message delegate
/// <ul>
///   <li>
///     Returns   delegate:   InAppMessage delegate to show the message
///   </li>
/// </ul>
- (void)setEventDelegate:(id <SFMCSdkInAppMessageEventDelegate> _Nullable)delegate;
/// Message Id for a given message dictionary
/// <ul>
///   <li>
///     Returns   String MEssage Id
///   </li>
/// </ul>
/// \param forMessage Message Dictionary
///
- (NSString * _Nullable)messageIdForMessage:(NSDictionary * _Nonnull)forMessage SWIFT_WARN_UNUSED_RESULT;
/// Show in-app message in the app
/// \param messageId MessageId Id of the in-app message to be shown
///
- (void)showInAppMessageWithMessageId:(NSString * _Nonnull)messageId;
/// Set in-app message to be shown in the app with specified font
/// \param fontName Fontname in which the app should be set
///
- (BOOL)setInAppMessageWithFontName:(NSString * _Nullable)fontName SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of all messages that includes read, unread , deleted messages
/// <a href="https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/inbox/inbox.html">Public properties in inbox message dictionary </a>
///
/// returns:
/// an Array of  Dictionary containing all messages (read, unread and deleted)
- (NSArray * _Nullable)getAllMessages SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of unread messages
/// <ul>
///   <li>
///     Returns   an Array of  Dictionary containing  unread messages
///     <a href="https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/inbox/inbox.html">Public properties in inbox message dictionary </a>
///   </li>
/// </ul>
- (NSArray * _Nullable)getUnreadMessages SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of read messages
/// <ul>
///   <li>
///     Returns    an Array of  Dictionary containing  read messages
///     <a href="https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/inbox/inbox.html">Public properties in inbox message dictionary </a>
///   </li>
/// </ul>
- (NSArray * _Nullable)getReadMessages SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of deleted messages
/// <ul>
///   <li>
///     Returns  an Array of  Dictionary containing deleted messages
///   </li>
/// </ul>
/// <a href="https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/inbox/inbox.html">Public properties in inbox message dictionary </a>
- (NSArray * _Nullable)getDeletedMessages SWIFT_WARN_UNUSED_RESULT;
/// Returns all messages count
/// <ul>
///   <li>
///     Returns   UInt  no of all messages count
///   </li>
/// </ul>
- (NSUInteger)getAllMessagesCount SWIFT_WARN_UNUSED_RESULT;
/// Returns unread messages count
/// <ul>
///   <li>
///     Returns   UInt  no of all unread messages count
///   </li>
/// </ul>
- (NSUInteger)getUnreadMessagesCount SWIFT_WARN_UNUSED_RESULT;
/// Returns read messages count
/// <ul>
///   <li>
///     Returns   UInt  no of all read messages count
///   </li>
/// </ul>
- (NSUInteger)getReadMessagesCount SWIFT_WARN_UNUSED_RESULT;
/// Returns deleted messages count
/// <ul>
///   <li>
///     Returns  UInt  no of all deleted messages count
///   </li>
/// </ul>
- (NSUInteger)getDeletedMessagesCount SWIFT_WARN_UNUSED_RESULT;
/// Mark the unread messages as read
/// \param messageDictionary  Collection of messages to be marked as read 
///
- (BOOL)markMessageRead:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
/// Mark the  messages as deleted
/// \param messageDictionary Collection of messages to be marked as deleted
///
- (BOOL)markMessageDeleted:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
/// Mark the message with specific messageId as read
/// \param messageId String  Message with messageId String to be marked as read
///
- (BOOL)markMessageWithIdReadWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
/// Mark the message with specific messageId as deleted
/// \param messageId String  Message with messageId String to be marked as deleted
///
- (BOOL)markMessageWithIdDeletedWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
/// Mark all the messages with specific messageId as read
/// <ul>
///   <li>
///     Returns    Returns if all the messages are marked as read successfully
///   </li>
/// </ul>
- (BOOL)markAllMessagesRead SWIFT_WARN_UNUSED_RESULT;
/// Mark all the messages with specific messageId as deleted
/// <ul>
///   <li>
///     Returns    Returns if all the messages are marked as read successfully
///   </li>
/// </ul>
- (BOOL)markAllMessagesDeleted SWIFT_WARN_UNUSED_RESULT;
/// Fetches and refreshes messages from server
/// Reload and refresh Inbox messages from the Marketing Cloud server.
/// Note: The underlying request to the server will be throttled such that it will execute at most every 60 seconds. If the method has been called less than 60 seconds after the preceeding method call, NO will be returned and the request will not be made. If NO is returned, best practice is that any UI used to reflect the refresh operation is updated (pull to refresh indicators, loading spinners, etc.).
/// DDoS Protection
/// The SDK has several built in mechanisms to protect Marketing Cloud servers and services. For message GET routes, we allow at most one manual refresh request per minute. This prevents bad application implementations or mobile app users from calling refresh over and over when there will be no new data available.
/// Within the SDK and it’s logging, this presents a 429 - Too Many Requests log statement.
/// Throttling
/// To protect the workload and ensure optimal performance, the Inbox Message routes may throttle incoming requests. This throttling is based on adaptive logic, which operates as a percentage of traffic depending on the current load. The system is designed to automatically determine when throttling is necessary or when it can be reduced.
/// During periods of traffic throttling, some customer requests may receive a 429 - Too Many Requests response. This will log a 429 response within the SDK. The Marketing Cloud has considerable server-side logic to monitor and adjust this throttling mechanism.
/// This method will cause notifications to be posted to NSNotificationCenter:
/// <ul>
///   <li>
///     SFMCInboxMessagesRefreshCompleteNotification: posted when the refresh process has completed
///   </li>
///   <li>
///     SFMCInboxMessagesNewInboxMessagesNotification: posted if there are new Inbox messages
///   </li>
///   <li>
///     Returns    Returns if message refresh is success or not
///   </li>
/// </ul>
- (BOOL)refreshMessages SWIFT_WARN_UNUSED_RESULT;
/// Set  datasource for the inbox tableview
/// <ul>
///   <li>
///     Returns    InboxMessagesDataSource Inbox tableview Datasource that is set
///   </li>
/// </ul>
/// \param tableView Tableview for which datasource should be set
///
- (id <SFMCSdkInboxMessagesDataSource> _Nullable)inboxMessagesTableViewDataSourceForTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
/// Set  delegate for the inbox tableview
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     tableView:  Tableview for which datasource should be set
///   </li>
///   <li>
///     dataSource: Datasource for the Inbox tableview
///   </li>
///   <li>
///     Returns   InboxMessagesDelegate Inbox tableview Delegate that is set
///   </li>
/// </ul>
- (id <SFMCSdkInboxMessagesDelegate> _Nullable)inboxMessagesTableViewDelegateForTableView:(UITableView * _Nonnull)tableView dataSource:(id <SFMCSdkInboxMessagesDataSource> _Nonnull)dataSource SWIFT_WARN_UNUSED_RESULT;
/// Set  String identifier
/// <ul>
///   <li>
///     Returns     Return YES if the identifier set is successful or not
///   </li>
/// </ul>
/// \param identifier Identifier to be set
///
- (BOOL)setPiIdentifier:(NSString * _Nullable)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns piIdentifier
/// <ul>
///   <li>
///     Returns    String  identifier that is set
///   </li>
/// </ul>
- (NSString * _Nullable)piIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Track the inbox messages that are opened in the app
/// \param inboxMessage Dictionary for which the track should happen
///
- (void)trackMessageOpened:(NSDictionary * _Nonnull)inboxMessage;
/// Track the pageview  visited in the page
/// \param url url String
///
/// \param title Title of the pageview
///
/// \param item item String
///
/// \param search search String
///
- (void)trackPageViewWithUrl:(NSString * _Nonnull)url title:(NSString * _Nullable)title item:(NSString * _Nullable)item search:(NSString * _Nullable)search;
/// Track contents in the cart
/// \param cartDictionary Collection of items to be tracked
///
- (void)trackCartContents:(NSDictionary * _Nonnull)cartDictionary;
/// Track Conversion on the items in the cart
/// \param orderDictionary Collection of items converted in the bag
///
- (void)trackCartConversion:(NSDictionary * _Nonnull)orderDictionary;
/// Returns cartItem Dictionary with specific price, quantity, item and Id
/// <ul>
///   <li>
///     Returns cartItemDictionary collection
///   </li>
/// </ul>
/// \param quantity car item Dictionary should be returned by quantity
///
/// \param item item by which the car item Dictionary should be returned
///
/// \param uniqueId Unique Id  by which the car item Dictionary should be returned
///
- (NSDictionary * _Nullable)cartItemDictionaryWithPrice:(NSNumber * _Nonnull)price quantity:(NSNumber * _Nonnull)quantity item:(NSString * _Nonnull)item uniqueId:(NSString * _Nullable)uniqueId SWIFT_WARN_UNUSED_RESULT;
/// Returns cart Dictionary with cartItem
/// \param cartItem Collection of cartItems
///
- (NSDictionary * _Nullable)cartDictionaryWithCartItem:(NSArray * _Nonnull)cartItem SWIFT_WARN_UNUSED_RESULT;
/// Returns order Dictionary with ordernumber, shipping number, discount, cart dictionary
/// <ul>
///   <li>
///     shipping:    Order  Dictionary returned by shipping
///   </li>
///   <li>
///     discount:     Order  Dictionary returned by discount
///   </li>
///   <li>
///     cart:  Order  Dictionary returned by cart
///   </li>
///   <li>
///     Returns    Dictionary  Collection of order dictionary
///   </li>
/// </ul>
/// \param orderNumber Order  Dictionary returned by orderNumber
///
- (NSDictionary * _Nullable)orderDictionaryWithOrderNumber:(NSString * _Nonnull)orderNumber shipping:(NSNumber * _Nonnull)shipping discount:(NSNumber * _Nonnull)discount cart:(NSDictionary * _Nonnull)cart SWIFT_WARN_UNUSED_RESULT;
/// Set location delegate
/// \param delegate Location delegate
///
- (void)setLocationDelegate:(id <SFMCSdkLocationDelegate> _Nullable)delegate;
/// Returns region from collection of  region
/// \param dictionary Collection of region
///
- (CLRegion * _Nullable)regionFromDictionary:(NSDictionary * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Returns if location is enabled in the SDK
/// <ul>
///   <li>
///     Returns    Returns YES if location is enabled or disabled
///   </li>
/// </ul>
- (BOOL)locationEnabled SWIFT_WARN_UNUSED_RESULT;
/// Enables the co-ordinates tracking  on the device
- (void)startWatchingLocation;
/// Disables the co-ordinates tracking  on the device
- (void)stopWatchingLocation;
/// Returns if location watching is enabled or not
/// <ul>
///   <li>
///     Returns    Returns YES if location is being watched
///   </li>
/// </ul>
- (BOOL)watchingLocation SWIFT_WARN_UNUSED_RESULT;
/// Returns  last known location
/// <ul>
///   <li>
///     Returns    Returns last known location co-ordinates in string
///   </li>
/// </ul>
- (NSDictionary<NSString *, NSString *> * _Nullable)lastKnownLocation SWIFT_WARN_UNUSED_RESULT;
/// Set URLHandling delegate to handle URLs in OpenDirect URLs, CloudPage URLs, CloudPage URLs from inbox messages
/// \param delegate set the delegate to handle URLs
///
- (void)setURLHandlingDelegate:(id <SFMCSdkURLHandlingDelegate> _Nullable)delegate;
/// Initialize PushModule and return Shared instance
/// <ul>
///   <li>
///     Returns    SFMCModule PushModule
///     :nodoc:
///   </li>
/// </ul>
/// \param config Module config with module name and appid
///
/// \param components EncryptionManager, StorageManager, BehaviourManager
///
+ (id <SFMCModule> _Nullable)initModuleWithConfig:(id <SFMCSdkModuleConfig> _Nonnull)config components:(SFMCSdkComponents * _Nonnull)components SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// This method is to listen to specific tags set by the consuming application
/// :nodoc:
+ (void)sendIdentityEventForTags;
/// This method is to listen to contactkey set by the consuming application
/// :nodoc:
+ (void)sendIdentityEventForContactKey;
/// This method is to listen to attributes set by the consuming application
/// :nodoc:
+ (void)sendIdentityEventForAttributes;
/// This method is used to receive message from publishers and update the identities like profile atributes and contactKey
/// \param message SFMCEvent, publish to specific Custom event
/// :nodoc:
///
- (void)receiveWithMessage:(SFMCSdkMessage * _Nonnull)message;
/// This method is used to publish to a custom event, SFMCEvent
/// \param event SFMCEvent, publish to specific Custom event
///
/// \param category EventCategory, category which falls under any one of the category 1) .engagemnt, 2) .identity, 3) .system
/// :nodoc:
///
+ (void)sendSfmcEvent:(SFMCEvent * _Nonnull)event category:(enum SFMCSdkEventCategory)category;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef MARKETINGCLOUDSDK_SWIFT_H
#define MARKETINGCLOUDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import SFMCSDK;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MarketingCloudSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// :nodoc:
SWIFT_CLASS("_TtC17MarketingCloudSDK30MarketingCloudSDKSelectorUtils")
@interface MarketingCloudSDKSelectorUtils : NSObject
+ (BOOL)isAppDelegateImplementsSelector:(NSString * _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isUserNotificationDelegateImplementsSelector:(NSString * _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This class  is used to set the configuration neded for Push
SWIFT_CLASS("_TtC17MarketingCloudSDK10PushConfig")
@interface PushConfig : NSObject <SFMCSdkModuleConfig>
/// Enable or disable screen tracking
@property (nonatomic) BOOL trackScreens;
/// name of the module
@property (nonatomic, readonly) enum SFMCSdkModuleName name;
/// applicationId to initialize the SDK
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;

/// PushConfigBuilder class
SWIFT_CLASS("_TtC17MarketingCloudSDK17PushConfigBuilder")
@interface PushConfigBuilder : NSObject
/// Initialize PushConfigBuilder
/// <ul>
///   <li>
///     :     appId  String which is a unique identifier
///   </li>
/// </ul>
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId OBJC_DESIGNATED_INITIALIZER;
/// <ul>
///   <li>
///     : accessToken setAccessToken Allows setting the value to use for the Salesforce MarketingCloud accessToken.
///   </li>
///   <li>
///     \code
///     Returns the PushConfigBuilder instancetype value
///
///     \endcode</li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setAccessToken:(NSString * _Nonnull)accessToken;
/// <ul>
///   <li>
///     : setMarketingCloudServerUrl Allows setting the value to use for the Salesforce Tenant Specific Url.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setMarketingCloudServerUrl:(NSURL * _Nonnull)endpoint;
/// <ul>
///   <li>
///     : setMid Allows setting the value to use for the Salesforce MarketingCloud Tenant Specific mid.
///   </li>
///   <li>
///     Returns returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setMid:(NSString * _Nonnull)mid;
/// <ul>
///   <li>
///     : setLocationEnabled Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setLocationEnabled:(BOOL)enabled;
/// <ul>
///   <li>
///     : setInboxEnabled Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setInboxEnabled:(BOOL)enabled;
/// <ul>
///   <li>
///     : setAnalyticsEnabled Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setAnalyticsEnabled:(BOOL)enabled;
/// <ul>
///   <li>
///     : setPiAnalyticsEnabled Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setPIAnalyticsEnabled:(BOOL)enabled;
/// <ul>
///   <li>
///     : etUseLegacyPIIdentifier Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setUseLegacyPIIdentifier:(BOOL)enabled;
/// <ul>
///   <li>
///     : setApplicationControlsBadging Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setApplicationControlsBadging:(BOOL)enabled;
/// Sets the configuration value which enables or disables application control over delaying SDK registration until a contact key is set
/// <ul>
///   <li>
///     : delayRegistrationUntilContactKeyIsSet Allows setting the state to YES or NO.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setDelayRegistrationUntilContactKeyIsSet:(BOOL)enabled;
/// Sets the configuration value which enables or disables the screen entry tracking
/// <ul>
///   <li>
///     :enableScreenEntryTracking enables or disables screen entry tracking in SFMCSdk
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setEnableScreenEntryTracking:(BOOL)enabled;
/// Activates/Deactivates the automatic marking of inbox messages as read when clicking the inbox notification, provided that this configuration is enabled. The default setting for this API is true.
/// <ul>
///   <li>
///     :markMessageReadOnInboxNotificationOpen enables or disables this marking of inbox messages as read upon clicking the inbox notification.
///   </li>
///   <li>
///     Returns the PushConfigBuilder instancetype value
///   </li>
/// </ul>
- (PushConfigBuilder * _Nonnull)setMarkMessageReadOnInboxNotificationOpen:(BOOL)enabled;
/// <ul>
///   <li>
///     Returns PushConfig containing the current builder configuration settings.
///   </li>
/// </ul>
- (PushConfig * _Nonnull)build;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SFMCSdkModuleLogger;
@class NSData;
@class UNNotificationRequest;
@protocol SFMCSdkModuleIdentity;
@protocol SFMCSdkInAppMessageEventDelegate;
@class UITableView;
@protocol SFMCSdkInboxMessagesDataSource;
@protocol SFMCSdkInboxMessagesDelegate;
@class NSNumber;
@protocol SFMCSdkLocationDelegate;
@class CLRegion;
@protocol SFMCSdkURLHandlingDelegate;
@class SFMCSdkComponents;
@class SFMCSdkMessage;
@class SFMCEvent;

/// This class is a Swift Interface  for SFMCSdkPushModule
SWIFT_CLASS_NAMED("PushModule")
@interface SFMCSdkPushModule : NSObject <PushInterface, SFMCModule, Subscriber>
/// Enum to get the Module Name
@property (nonatomic) enum SFMCSdkModuleName name;
/// String to get the Module Version
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull moduleVersion;)
+ (NSString * _Nonnull)moduleVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setModuleVersion:(NSString * _Nonnull)value;
/// Dictionary to get the SDK properties
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable stateProperties;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)stateProperties SWIFT_WARN_UNUSED_RESULT;
+ (void)setStateProperties:(NSDictionary<NSString *, NSString *> * _Nullable)newValue SWIFT_UNAVAILABLE;
/// Enum to get the status of Module with options => .inactive, .cancelled, .disabled, .failed, .initializing, .operational
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum SFMCSdkModuleStatus status;)
+ (enum SFMCSdkModuleStatus)status SWIFT_WARN_UNUSED_RESULT;
+ (void)setStatus:(enum SFMCSdkModuleStatus)value;
/// Singleton interface to access the PushModule
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SFMCSdkPushModule * _Nonnull shared;)
+ (SFMCSdkPushModule * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Unified Logger initialized for ‘Push’ Module
/// Usage: logger.d(category: .event, message: “Message”)
/// Category : Enum with following values => auth, behavior, encryption, eventBus, network, module, sdk, storage, consent, coredata, database, event, identity, interface, location, session, util
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SFMCSdkModuleLogger * _Nonnull logger;)
+ (SFMCSdkModuleLogger * _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
/// This method is to get the SDK metadata
+ (NSDictionary<NSString *, id> * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
/// Ask MarketingCloudSDK to update its data. MarketingCloudSDK will throttle attempts based on the time since the last time this was called.
/// <ul>
///   <li>
///     Returns   YES if MarketingCloudSDK did make an attempt at updating data.
///   </li>
/// </ul>
/// \param completionHandler The UIBackgroundFetchResult completion handler. This method will be called with UIBackgroundFetchResultNoData if no attempt was made to update data, otherwise it will be called with UIBackgroundFetchResultNewData after the update completes. If nil is passed, then process of the completion handler must be managed by the caller.
///
- (BOOL)refreshWithFetchCompletionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// This method properly closes down the MarketingCloudSDK. It should be used in any cases where references to the MarketingCloudSDK need to be released. Ensure to be called when sdk is operational
/// Eg: if(SFMCSdk.mp.getStatus() == .operational) { SFMCSdk.mp.tearDown()}
/// note:
/// This method will be removed in future versions
/// :nodoc:
- (void)tearDown SWIFT_DEPRECATED_MSG("This method will be removed as the Push Module will automatically handle tear downs upon initializations");
/// Returns if Data merge policy is reset to re-trigger merge
/// <ul>
///   <li>
///     Returns    Returns YES if data policy reset is successful
///   </li>
/// </ul>
- (BOOL)resetDataPolicy SWIFT_WARN_UNUSED_RESULT;
/// Enable/Disable extra debug logging from the SDK.
/// \param enabled BOOL for enabling or disabling extra SDK logging.
///
- (void)setDebugLoggingEnabled:(BOOL)enabled;
/// PushModule.shared.getLogger().d(category: .event, message: “Message”)
+ (SFMCSdkModuleLogger * _Nonnull)getLogger SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Contact key String that is set in the application.
- (NSString * _Nullable)contactKey SWIFT_WARN_UNUSED_RESULT;
/// Adds the provided Tag (NSString) to the set of unique tags.
/// \param tag A string to add to the list of tags.
///
///
/// returns:
/// YES if added successfully.
- (BOOL)addTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Adds the provided array of Tags (NSString) to the set of unique tags.
/// Will trim leading and trailing whitespace.
/// Cannot be nil or blank.
/// \param tags An array of tags to add to the list.
///
///
/// returns:
/// Set of tags added, as strings, or nil if something failed.
- (NSSet * _Nullable)addTags:(NSArray * _Nonnull)tags SWIFT_WARN_UNUSED_RESULT;
/// Removes the provided Tag (NSString) from the list of tags.
/// \param tag A string to remove from the list of tags.
///
///
/// returns:
/// YES if removed successfully.
- (BOOL)removeTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Returns the list of tags for this device.
///
/// returns:
/// All tags associated, as strings.
- (NSSet * _Nullable)tags SWIFT_WARN_UNUSED_RESULT;
/// Responsible for sending the Apple device token back to Salesforce. It marks the end of the token registration flow. If it is unable to reach Salesforce server, it will save the token and try again later.
/// This method is necessary to the implementation of Salesforce Push.
/// \param deviceToken An array of tags to add to the list.
///
- (void)setDeviceToken:(NSData * _Nonnull)deviceToken;
/// Returns the device token as a NSString.
/// <ul>
///   <li>
///     Returns   the device token as a NSString.
///   </li>
/// </ul>
- (NSString * _Nullable)deviceToken SWIFT_WARN_UNUSED_RESULT;
/// Returns a read-only copy of the Attributes dictionary as it is right now.
/// <ul>
///   <li>
///     Returns   All attributes currently set.
///   </li>
/// </ul>
- (NSDictionary * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
/// Returns the Salesforce application accessToken.
/// <ul>
///   <li>
///     Returns  NSString Salesforce application accessToken.
///   </li>
/// </ul>
- (NSString * _Nullable)accessToken SWIFT_WARN_UNUSED_RESULT;
/// Returns the unique device identifier that Salesforce will use to identify the device.
/// <ul>
///   <li>
///     Returns  NSString The device identifier (a UUID) as a NSString.
///   </li>
/// </ul>
- (NSString * _Nullable)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Add a signedString security token for registration security
/// <ul>
///   <li>
///     Returns   YES if signedString was set successfully
///   </li>
/// </ul>
/// \param signedString signedString opaque token used to verify registration. pass nil to clear signedString.
///
- (BOOL)setSignedString:(NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
/// Returns the value of last stored signedString security token
/// <ul>
///   <li>
///     Returns a String of last stored signedString security token
///   </li>
/// </ul>
- (NSString * _Nullable)signedString SWIFT_WARN_UNUSED_RESULT;
/// Register a callback that will be notified when Registration related events happen
/// @see: https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/sdk-implementation/user-data.html
/// @param registrationCallback   closure to be provided when registration event occurs
- (void)setRegistrationCallback:(void (^ _Nonnull)(NSDictionary * _Nonnull))registrationCallback;
/// Removes the registration callback
/// @see: https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/sdk-implementation/user-data.html
- (void)unsetRegistrationCallback;
/// Developer override to set the state of push enablement to YES/NO. If set to NO, the application will not receive any push notifications once the Marketing Cloud server has been updated.
/// When this value is NO, it takes precedence (overrides) the user notifications settings (i.e., setting this to NO will always disable push.)
/// Conversely, if the user has notifications settings disabled, the developer cannot enable push via this method. A NO value from either source (user settings or developer interface) always wins.
/// \param pushEnabled Set to YES to enable push notifications.
///
- (void)setPushEnabled:(BOOL)pushEnabled;
/// The current state of the developer’s push enablement override
/// The current state of the pushEnabled flag in the SDK.
/// <ul>
///   <li>
///     Returns    BOOL value of the developer’s push enablement override.
///   </li>
///   <li>
///     Returns    a BOOL value of the current pushEnabled state.
///   </li>
/// </ul>
- (BOOL)pushEnabled SWIFT_WARN_UNUSED_RESULT;
/// Developer override to set the state of analytics enablement to YES/NO.
/// If set to NO, the SDK will stop tracking analytics and also purges all the analytics stored locally.
/// This value takes precedence over the config setting which is passed during the SDK initialization.
- (void)setAnalyticsEnabled:(BOOL)analyticsEnabled;
/// The current state of the Analytics enablement override
/// <ul>
///   <li>
///     Returns  a BOOL value of the Analytics enablement override considering config setting .
///   </li>
/// </ul>
- (BOOL)isAnalyticsEnabled SWIFT_WARN_UNUSED_RESULT;
/// Developer override to set the state of PI analytics enablement to YES/NO.
/// If set to NO, the SDK will stop tracking PI analytics and also purges all the analytics stored locally.
/// This value takes precedence over the config setting which is passed during the SDK initialization.
- (void)setPiAnalyticsEnabled:(BOOL)analyticsEnabled;
/// The current state of the PI Analytics enablement override
/// <ul>
///   <li>
///     Returns  a BOOL value of the PI Analytics enablement override considering config setting .
///   </li>
/// </ul>
- (BOOL)isPiAnalyticsEnabled SWIFT_WARN_UNUSED_RESULT;
/// The current state of the Location enablement override
/// <ul>
///   <li>
///     Returns a BOOL value of the Location enablement override considering config setting .
///   </li>
/// </ul>
- (BOOL)isLocationEnabled SWIFT_WARN_UNUSED_RESULT;
/// Developer override to set the state of Location enablement to YES/NO.
/// If set to NO, the SDK will stop monitoring location and Location services are not available for the consuming application.
/// This value takes precedence over the config setting which is passed during the SDK initialization.
/// \param locationEnabled Bool value to enabled/disable geofence at runtime
///
- (void)setLocationEnabled:(BOOL)locationEnabled;
/// The current state of the Inbox enablement override
/// <ul>
///   <li>
///     Returns a BOOL value of the Inbox enablement override considering config setting .
///   </li>
/// </ul>
- (BOOL)isInboxEnabled SWIFT_WARN_UNUSED_RESULT;
/// Developer override to set the state of Inbox enablement to YES/NO.
/// If set to NO, Inbox feature will be disabled.
/// This value takes precedence over the config setting which is passed during the SDK initialization.
/// \param inboxEnabled Bool value to enabled/disable Inbox at runtime
///
- (void)setInboxEnabled:(BOOL)inboxEnabled;
/// Informs the SDK of the current notification.
/// <ul>
///   <li>
///     Returns request:   The UNNotificationRequest that generated a notification.
///   </li>
/// </ul>
- (void)setNotificationRequest:(UNNotificationRequest * _Nonnull)request;
/// Returns the last notification delivered to the SDK.
/// <ul>
///   <li>
///     Returns UNNotificationRequest:    * The last UNNotificationRequest that generated a notification.
///   </li>
/// </ul>
- (UNNotificationRequest * _Nullable)notificationRequest SWIFT_WARN_UNUSED_RESULT;
/// Informs the SDK of the current notification.
/// \param userInfo The user info the last notification delivered to the SDK.
///
- (void)setNotificationUserInfo:(NSDictionary * _Nonnull)userInfo;
/// Returns the user info of the last notification delivered to the SDK.
/// <ul>
///   <li>
///     Returns Dictionary: * The user info the last notification delivered to the SDK.
///   </li>
/// </ul>
- (NSDictionary * _Nonnull)notificationUserInfo SWIFT_WARN_UNUSED_RESULT;
/// This method is used to get the SDK identity attributes such as applicationId, customProperties, installationId, profileId
- (id <SFMCSdkModuleIdentity> _Nullable)getIdentity SWIFT_WARN_UNUSED_RESULT;
/// In-app messages is used to deliver relevant, personalized messages to the app’s users with in-app messaging without relying on users having enabled push notifications. Set inapp message delegate
/// <ul>
///   <li>
///     Returns   delegate:   InAppMessage delegate to show the message
///   </li>
/// </ul>
- (void)setEventDelegate:(id <SFMCSdkInAppMessageEventDelegate> _Nullable)delegate;
/// Message Id for a given message dictionary
/// <ul>
///   <li>
///     Returns   String MEssage Id
///   </li>
/// </ul>
/// \param forMessage Message Dictionary
///
- (NSString * _Nullable)messageIdForMessage:(NSDictionary * _Nonnull)forMessage SWIFT_WARN_UNUSED_RESULT;
/// Show in-app message in the app
/// \param messageId MessageId Id of the in-app message to be shown
///
- (void)showInAppMessageWithMessageId:(NSString * _Nonnull)messageId;
/// Set in-app message to be shown in the app with specified font
/// \param fontName Fontname in which the app should be set
///
- (BOOL)setInAppMessageWithFontName:(NSString * _Nullable)fontName SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of all messages that includes read, unread , deleted messages
/// <a href="https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/inbox/inbox.html">Public properties in inbox message dictionary </a>
///
/// returns:
/// an Array of  Dictionary containing all messages (read, unread and deleted)
- (NSArray * _Nullable)getAllMessages SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of unread messages
/// <ul>
///   <li>
///     Returns   an Array of  Dictionary containing  unread messages
///     <a href="https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/inbox/inbox.html">Public properties in inbox message dictionary </a>
///   </li>
/// </ul>
- (NSArray * _Nullable)getUnreadMessages SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of read messages
/// <ul>
///   <li>
///     Returns    an Array of  Dictionary containing  read messages
///     <a href="https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/inbox/inbox.html">Public properties in inbox message dictionary </a>
///   </li>
/// </ul>
- (NSArray * _Nullable)getReadMessages SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of deleted messages
/// <ul>
///   <li>
///     Returns  an Array of  Dictionary containing deleted messages
///   </li>
/// </ul>
/// <a href="https://salesforce-marketingcloud.github.io/MarketingCloudSDK-iOS/inbox/inbox.html">Public properties in inbox message dictionary </a>
- (NSArray * _Nullable)getDeletedMessages SWIFT_WARN_UNUSED_RESULT;
/// Returns all messages count
/// <ul>
///   <li>
///     Returns   UInt  no of all messages count
///   </li>
/// </ul>
- (NSUInteger)getAllMessagesCount SWIFT_WARN_UNUSED_RESULT;
/// Returns unread messages count
/// <ul>
///   <li>
///     Returns   UInt  no of all unread messages count
///   </li>
/// </ul>
- (NSUInteger)getUnreadMessagesCount SWIFT_WARN_UNUSED_RESULT;
/// Returns read messages count
/// <ul>
///   <li>
///     Returns   UInt  no of all read messages count
///   </li>
/// </ul>
- (NSUInteger)getReadMessagesCount SWIFT_WARN_UNUSED_RESULT;
/// Returns deleted messages count
/// <ul>
///   <li>
///     Returns  UInt  no of all deleted messages count
///   </li>
/// </ul>
- (NSUInteger)getDeletedMessagesCount SWIFT_WARN_UNUSED_RESULT;
/// Mark the unread messages as read
/// \param messageDictionary  Collection of messages to be marked as read 
///
- (BOOL)markMessageRead:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
/// Mark the  messages as deleted
/// \param messageDictionary Collection of messages to be marked as deleted
///
- (BOOL)markMessageDeleted:(NSDictionary * _Nonnull)messageDictionary SWIFT_WARN_UNUSED_RESULT;
/// Mark the message with specific messageId as read
/// \param messageId String  Message with messageId String to be marked as read
///
- (BOOL)markMessageWithIdReadWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
/// Mark the message with specific messageId as deleted
/// \param messageId String  Message with messageId String to be marked as deleted
///
- (BOOL)markMessageWithIdDeletedWithMessageId:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
/// Mark all the messages with specific messageId as read
/// <ul>
///   <li>
///     Returns    Returns if all the messages are marked as read successfully
///   </li>
/// </ul>
- (BOOL)markAllMessagesRead SWIFT_WARN_UNUSED_RESULT;
/// Mark all the messages with specific messageId as deleted
/// <ul>
///   <li>
///     Returns    Returns if all the messages are marked as read successfully
///   </li>
/// </ul>
- (BOOL)markAllMessagesDeleted SWIFT_WARN_UNUSED_RESULT;
/// Fetches and refreshes messages from server
/// Reload and refresh Inbox messages from the Marketing Cloud server.
/// Note: The underlying request to the server will be throttled such that it will execute at most every 60 seconds. If the method has been called less than 60 seconds after the preceeding method call, NO will be returned and the request will not be made. If NO is returned, best practice is that any UI used to reflect the refresh operation is updated (pull to refresh indicators, loading spinners, etc.).
/// DDoS Protection
/// The SDK has several built in mechanisms to protect Marketing Cloud servers and services. For message GET routes, we allow at most one manual refresh request per minute. This prevents bad application implementations or mobile app users from calling refresh over and over when there will be no new data available.
/// Within the SDK and it’s logging, this presents a 429 - Too Many Requests log statement.
/// Throttling
/// To protect the workload and ensure optimal performance, the Inbox Message routes may throttle incoming requests. This throttling is based on adaptive logic, which operates as a percentage of traffic depending on the current load. The system is designed to automatically determine when throttling is necessary or when it can be reduced.
/// During periods of traffic throttling, some customer requests may receive a 429 - Too Many Requests response. This will log a 429 response within the SDK. The Marketing Cloud has considerable server-side logic to monitor and adjust this throttling mechanism.
/// This method will cause notifications to be posted to NSNotificationCenter:
/// <ul>
///   <li>
///     SFMCInboxMessagesRefreshCompleteNotification: posted when the refresh process has completed
///   </li>
///   <li>
///     SFMCInboxMessagesNewInboxMessagesNotification: posted if there are new Inbox messages
///   </li>
///   <li>
///     Returns    Returns if message refresh is success or not
///   </li>
/// </ul>
- (BOOL)refreshMessages SWIFT_WARN_UNUSED_RESULT;
/// Set  datasource for the inbox tableview
/// <ul>
///   <li>
///     Returns    InboxMessagesDataSource Inbox tableview Datasource that is set
///   </li>
/// </ul>
/// \param tableView Tableview for which datasource should be set
///
- (id <SFMCSdkInboxMessagesDataSource> _Nullable)inboxMessagesTableViewDataSourceForTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
/// Set  delegate for the inbox tableview
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     tableView:  Tableview for which datasource should be set
///   </li>
///   <li>
///     dataSource: Datasource for the Inbox tableview
///   </li>
///   <li>
///     Returns   InboxMessagesDelegate Inbox tableview Delegate that is set
///   </li>
/// </ul>
- (id <SFMCSdkInboxMessagesDelegate> _Nullable)inboxMessagesTableViewDelegateForTableView:(UITableView * _Nonnull)tableView dataSource:(id <SFMCSdkInboxMessagesDataSource> _Nonnull)dataSource SWIFT_WARN_UNUSED_RESULT;
/// Set  String identifier
/// <ul>
///   <li>
///     Returns     Return YES if the identifier set is successful or not
///   </li>
/// </ul>
/// \param identifier Identifier to be set
///
- (BOOL)setPiIdentifier:(NSString * _Nullable)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns piIdentifier
/// <ul>
///   <li>
///     Returns    String  identifier that is set
///   </li>
/// </ul>
- (NSString * _Nullable)piIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Track the inbox messages that are opened in the app
/// \param inboxMessage Dictionary for which the track should happen
///
- (void)trackMessageOpened:(NSDictionary * _Nonnull)inboxMessage;
/// Track the pageview  visited in the page
/// \param url url String
///
/// \param title Title of the pageview
///
/// \param item item String
///
/// \param search search String
///
- (void)trackPageViewWithUrl:(NSString * _Nonnull)url title:(NSString * _Nullable)title item:(NSString * _Nullable)item search:(NSString * _Nullable)search;
/// Track contents in the cart
/// \param cartDictionary Collection of items to be tracked
///
- (void)trackCartContents:(NSDictionary * _Nonnull)cartDictionary;
/// Track Conversion on the items in the cart
/// \param orderDictionary Collection of items converted in the bag
///
- (void)trackCartConversion:(NSDictionary * _Nonnull)orderDictionary;
/// Returns cartItem Dictionary with specific price, quantity, item and Id
/// <ul>
///   <li>
///     Returns cartItemDictionary collection
///   </li>
/// </ul>
/// \param quantity car item Dictionary should be returned by quantity
///
/// \param item item by which the car item Dictionary should be returned
///
/// \param uniqueId Unique Id  by which the car item Dictionary should be returned
///
- (NSDictionary * _Nullable)cartItemDictionaryWithPrice:(NSNumber * _Nonnull)price quantity:(NSNumber * _Nonnull)quantity item:(NSString * _Nonnull)item uniqueId:(NSString * _Nullable)uniqueId SWIFT_WARN_UNUSED_RESULT;
/// Returns cart Dictionary with cartItem
/// \param cartItem Collection of cartItems
///
- (NSDictionary * _Nullable)cartDictionaryWithCartItem:(NSArray * _Nonnull)cartItem SWIFT_WARN_UNUSED_RESULT;
/// Returns order Dictionary with ordernumber, shipping number, discount, cart dictionary
/// <ul>
///   <li>
///     shipping:    Order  Dictionary returned by shipping
///   </li>
///   <li>
///     discount:     Order  Dictionary returned by discount
///   </li>
///   <li>
///     cart:  Order  Dictionary returned by cart
///   </li>
///   <li>
///     Returns    Dictionary  Collection of order dictionary
///   </li>
/// </ul>
/// \param orderNumber Order  Dictionary returned by orderNumber
///
- (NSDictionary * _Nullable)orderDictionaryWithOrderNumber:(NSString * _Nonnull)orderNumber shipping:(NSNumber * _Nonnull)shipping discount:(NSNumber * _Nonnull)discount cart:(NSDictionary * _Nonnull)cart SWIFT_WARN_UNUSED_RESULT;
/// Set location delegate
/// \param delegate Location delegate
///
- (void)setLocationDelegate:(id <SFMCSdkLocationDelegate> _Nullable)delegate;
/// Returns region from collection of  region
/// \param dictionary Collection of region
///
- (CLRegion * _Nullable)regionFromDictionary:(NSDictionary * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Returns if location is enabled in the SDK
/// <ul>
///   <li>
///     Returns    Returns YES if location is enabled or disabled
///   </li>
/// </ul>
- (BOOL)locationEnabled SWIFT_WARN_UNUSED_RESULT;
/// Enables the co-ordinates tracking  on the device
- (void)startWatchingLocation;
/// Disables the co-ordinates tracking  on the device
- (void)stopWatchingLocation;
/// Returns if location watching is enabled or not
/// <ul>
///   <li>
///     Returns    Returns YES if location is being watched
///   </li>
/// </ul>
- (BOOL)watchingLocation SWIFT_WARN_UNUSED_RESULT;
/// Returns  last known location
/// <ul>
///   <li>
///     Returns    Returns last known location co-ordinates in string
///   </li>
/// </ul>
- (NSDictionary<NSString *, NSString *> * _Nullable)lastKnownLocation SWIFT_WARN_UNUSED_RESULT;
/// Set URLHandling delegate to handle URLs in OpenDirect URLs, CloudPage URLs, CloudPage URLs from inbox messages
/// \param delegate set the delegate to handle URLs
///
- (void)setURLHandlingDelegate:(id <SFMCSdkURLHandlingDelegate> _Nullable)delegate;
/// Initialize PushModule and return Shared instance
/// <ul>
///   <li>
///     Returns    SFMCModule PushModule
///     :nodoc:
///   </li>
/// </ul>
/// \param config Module config with module name and appid
///
/// \param components EncryptionManager, StorageManager, BehaviourManager
///
+ (id <SFMCModule> _Nullable)initModuleWithConfig:(id <SFMCSdkModuleConfig> _Nonnull)config components:(SFMCSdkComponents * _Nonnull)components SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// This method is to listen to specific tags set by the consuming application
/// :nodoc:
+ (void)sendIdentityEventForTags;
/// This method is to listen to contactkey set by the consuming application
/// :nodoc:
+ (void)sendIdentityEventForContactKey;
/// This method is to listen to attributes set by the consuming application
/// :nodoc:
+ (void)sendIdentityEventForAttributes;
/// This method is used to receive message from publishers and update the identities like profile atributes and contactKey
/// \param message SFMCEvent, publish to specific Custom event
/// :nodoc:
///
- (void)receiveWithMessage:(SFMCSdkMessage * _Nonnull)message;
/// This method is used to publish to a custom event, SFMCEvent
/// \param event SFMCEvent, publish to specific Custom event
///
/// \param category EventCategory, category which falls under any one of the category 1) .engagemnt, 2) .identity, 3) .system
/// :nodoc:
///
+ (void)sendSfmcEvent:(SFMCEvent * _Nonnull)event category:(enum SFMCSdkEventCategory)category;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
