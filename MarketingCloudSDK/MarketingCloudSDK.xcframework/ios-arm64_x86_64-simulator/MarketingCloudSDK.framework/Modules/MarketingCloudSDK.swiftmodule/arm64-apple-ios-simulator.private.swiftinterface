// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MarketingCloudSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import Foundation
@_exported import MarketingCloudSDK
import ObjectiveC
import SFMCSDK
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import ObjectiveC.runtime
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(SFMCSdkPushModule) final public class PushModule : ObjectiveC.NSObject, SFMCSDK.SFMCModule, SFMCSDK.PushInterface, SFMCSDK.Subscriber, SFMCSDK.Publisher {
  @objc final public var name: SFMCSDK.ModuleName
  @objc public static var moduleVersion: Swift.String
  @objc public static var stateProperties: [Swift.String : Swift.String]? {
    @objc get
    @available(*, unavailable)
    @objc set
  }
  @objc public static var status: SFMCSDK.ModuleStatus
  @objc public static var shared: MarketingCloudSDK.PushModule {
    @objc get
  }
  @objc public static let logger: SFMCSDK.ModuleLogger
  @objc public static func metadata() -> [Swift.String : Any]
  @objc final public func refresh(fetchCompletionHandler completionHandler: ((UIKit.UIBackgroundFetchResult) -> Swift.Void)?) -> Swift.Bool
  @available(*, deprecated, message: "This method will be removed as the Push Module will automatically handle tear downs upon initializations")
  @objc final public func tearDown()
  @objc final public func resetDataPolicy() -> Swift.Bool
  @objc final public func setDebugLoggingEnabled(_ enabled: Swift.Bool)
  @objc public static func getLogger() -> SFMCSDK.ModuleLogger
  @objc final public func contactKey() -> Swift.String?
  @objc final public func addTag(_ tag: Swift.String) -> Swift.Bool
  @objc final public func addTags(_ tags: [Any]) -> Swift.Set<Swift.AnyHashable>?
  @objc final public func removeTag(_ tag: Swift.String) -> Swift.Bool
  @objc final public func tags() -> Swift.Set<Swift.AnyHashable>?
  @objc final public func setDeviceToken(_ deviceToken: Foundation.Data)
  @objc final public func deviceToken() -> Swift.String?
  @objc final public func attributes() -> [Swift.AnyHashable : Any]?
  @objc final public func accessToken() -> Swift.String?
  @objc final public func deviceIdentifier() -> Swift.String?
  @objc final public func setSignedString(_ signedString: Swift.String?) -> Swift.Bool
  @objc final public func signedString() -> Swift.String?
  @objc final public func setRegistrationCallback(_ registrationCallback: @escaping (Swift.Dictionary<Swift.AnyHashable, Any>) -> Swift.Void)
  @objc final public func unsetRegistrationCallback()
  @objc final public func setPushEnabled(_ pushEnabled: Swift.Bool)
  @objc final public func pushEnabled() -> Swift.Bool
  @objc final public func setAnalyticsEnabled(_ analyticsEnabled: Swift.Bool)
  @objc final public func isAnalyticsEnabled() -> Swift.Bool
  @objc final public func setPiAnalyticsEnabled(_ analyticsEnabled: Swift.Bool)
  @objc final public func isPiAnalyticsEnabled() -> Swift.Bool
  @objc final public func isLocationEnabled() -> Swift.Bool
  @objc final public func setLocationEnabled(_ locationEnabled: Swift.Bool)
  @objc final public func isInboxEnabled() -> Swift.Bool
  @objc final public func setInboxEnabled(_ inboxEnabled: Swift.Bool)
  @objc final public func setNotificationRequest(_ request: UserNotifications.UNNotificationRequest)
  @objc final public func notificationRequest() -> UserNotifications.UNNotificationRequest?
  @objc final public func setNotificationUserInfo(_ userInfo: [Swift.AnyHashable : Any])
  @objc final public func notificationUserInfo() -> [Swift.AnyHashable : Any]
  @objc final public func getIdentity() -> (any SFMCSDK.ModuleIdentity)?
  @objc final public func setEventDelegate(_ delegate: (any SFMCSDK.InAppMessageEventDelegate)?)
  @objc final public func messageId(forMessage: [Swift.AnyHashable : Any]) -> Swift.String?
  @objc final public func showInAppMessage(messageId: Swift.String)
  @objc final public func setInAppMessage(fontName: Swift.String?) -> Swift.Bool
  @objc final public func getAllMessages() -> [Any]?
  @objc final public func getUnreadMessages() -> [Any]?
  @objc final public func getReadMessages() -> [Any]?
  @objc final public func getDeletedMessages() -> [Any]?
  @objc final public func getAllMessagesCount() -> Swift.UInt
  @objc final public func getUnreadMessagesCount() -> Swift.UInt
  @objc final public func getReadMessagesCount() -> Swift.UInt
  @objc final public func getDeletedMessagesCount() -> Swift.UInt
  @objc final public func markMessageRead(_ messageDictionary: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc final public func markMessageDeleted(_ messageDictionary: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc final public func markMessageWithIdRead(messageId: Swift.String) -> Swift.Bool
  @objc final public func markMessageWithIdDeleted(messageId: Swift.String) -> Swift.Bool
  @objc final public func markAllMessagesRead() -> Swift.Bool
  @objc final public func markAllMessagesDeleted() -> Swift.Bool
  @objc final public func refreshMessages() -> Swift.Bool
  @objc final public func inboxMessagesTableViewDataSourceFor(tableView: UIKit.UITableView) -> (any SFMCSDK.InboxMessagesDataSource)?
  @objc final public func inboxMessagesTableViewDelegateFor(tableView: UIKit.UITableView, dataSource: any SFMCSDK.InboxMessagesDataSource) -> (any SFMCSDK.InboxMessagesDelegate)?
  @objc final public func setPiIdentifier(_ identifier: Swift.String?) -> Swift.Bool
  @objc final public func piIdentifier() -> Swift.String?
  @objc final public func trackMessageOpened(_ inboxMessage: [Swift.AnyHashable : Any])
  @objc final public func trackPageView(url: Swift.String, title: Swift.String?, item: Swift.String?, search: Swift.String?)
  @objc final public func trackCartContents(_ cartDictionary: [Swift.AnyHashable : Any])
  @objc final public func trackCartConversion(_ orderDictionary: [Swift.AnyHashable : Any])
  @objc final public func cartItemDictionary(price: Foundation.NSNumber, quantity: Foundation.NSNumber, item: Swift.String, uniqueId: Swift.String?) -> [Swift.AnyHashable : Any]?
  @objc final public func cartDictionary(cartItem: [Any]) -> [Swift.AnyHashable : Any]?
  @objc final public func orderDictionary(orderNumber: Swift.String, shipping: Foundation.NSNumber, discount: Foundation.NSNumber, cart: [Swift.AnyHashable : Any]) -> [Swift.AnyHashable : Any]?
  @objc final public func setLocationDelegate(_ delegate: (any SFMCSDK.LocationDelegate)?)
  @objc final public func regionFrom(dictionary: [Swift.AnyHashable : Any]) -> CoreLocation.CLRegion?
  @objc final public func locationEnabled() -> Swift.Bool
  @objc final public func startWatchingLocation()
  @objc final public func stopWatchingLocation()
  @objc final public func watchingLocation() -> Swift.Bool
  @objc final public func lastKnownLocation() -> [Swift.String : Swift.String]?
  @objc final public func setURLHandlingDelegate(_ delegate: (any SFMCSDK.URLHandlingDelegate)?)
  @objc public static func initModule(config: any SFMCSDK.ModuleConfig, components: SFMCSDK.SFMCSdkComponents) -> (any SFMCSDK.SFMCModule)?
  @objc public static func sendIdentityEventForTags()
  @objc public static func sendIdentityEventForContactKey()
  @objc public static func sendIdentityEventForAttributes()
  @objc final public func receive(message: SFMCSDK.Message)
  @objc public static func sendSfmcEvent(_ event: MarketingCloudSDK.SFMCEvent, category: SFMCSDK.EventCategory)
  @objc deinit
}
@objc public class PushConfigBuilder : ObjectiveC.NSObject {
  @objc public init(appId: Swift.String)
  @discardableResult
  @objc public func setAccessToken(_ accessToken: Swift.String) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func setMarketingCloudServerUrl(_ endpoint: Foundation.URL) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func setMid(_ mid: Swift.String) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func setLocationEnabled(_ enabled: Swift.Bool) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func setInboxEnabled(_ enabled: Swift.Bool) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func setAnalyticsEnabled(_ enabled: Swift.Bool) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func setPIAnalyticsEnabled(_ enabled: Swift.Bool) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func setUseLegacyPIIdentifier(_ enabled: Swift.Bool) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func setApplicationControlsBadging(_ enabled: Swift.Bool) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func setDelayRegistrationUntilContactKeyIsSet(_ enabled: Swift.Bool) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func setEnableScreenEntryTracking(_ enabled: Swift.Bool) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func setMarkMessageReadOnInboxNotificationOpen(_ enabled: Swift.Bool) -> MarketingCloudSDK.PushConfigBuilder
  @discardableResult
  @objc public func build() -> MarketingCloudSDK.PushConfig
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class PushConfig : ObjectiveC.NSObject, SFMCSDK.ModuleConfig {
  @objc public var trackScreens: Swift.Bool
  @objc final public let name: SFMCSDK.ModuleName
  @objc final public let appId: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MarketingCloudSDKSelectorUtils : ObjectiveC.NSObject {
  @objc public static func isAppDelegateImplementsSelector(_ selector: Swift.String) -> Swift.Bool
  @objc public static func isUserNotificationDelegateImplementsSelector(_ selector: Swift.String) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
